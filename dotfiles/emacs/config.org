#+TITLE: Emacs Config
#+AUTHOR: Van Hoa Nguyen
#+DATE: 2023-07-05 

* Emacs Config in Org Mode
** Maximize Screen on Startup
#+begin_src emacs-lisp
(custom-set-variables    ; only really necessary for ubuntu
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+end_src
** Remove Clutter
#+begin_src emacs-lisp
  (menu-bar-mode -1) ;; disable menu bar
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1) ; disable scrollbar
  (set-fringe-mode 10) ; Give some breathing room
  (setq inhibit-sartup-message t) ; inhibit startup screen
  (setq inhibit-splash-screen t) 
#+end_src
** Use-package
#+begin_src emacs-lisp
  (require 'package) ; Initialize package sources
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize) ; init packages

  (unless package-archive-contents
    (package-refresh-contents))
  
  (unless (package-installed-p 'use-package) ; init use-package on on-Linux platforms
    (package-install 'use-package))

  (require 'use-package) ; package manager
  (setq use-package-always-ensure t)
#+end_src
** Theme & Font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka-15")
  (use-package gruber-darker-theme
    :ensure t
    :config
    (load-theme 'gruber-darker t)) ; Themes
  (use-package doom-themes)
#+end_src
** Settings for C
#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq c-default-style "linux"		   
        c-basic-offset 4)
  (electric-pair-mode 1)  ; complete brackets (take out <)
  (setq electric-pair-inhibit-predicate
        (lambda (c)
          (if (char-equal c ?\<) t (electric-pair-default-inhibit c))))
#+end_src
** Line Numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative) ; line numbers
  (global-display-line-numbers-mode)
  (dolist (mode '(term-mode-hook
                  vterm-mode-hook
                  shell-mode-hook
                  cider-repl-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

  (setq backup-directory-alist '(("." . "~/.emacs_saves/"))) ; save directory
#+end_src
** Org-Babel
#+begin_src 
(org-babel-do-load-languages
    'org-babel-load-languages
	'((python . t)
      (java . t)
	  (sql . t)
      (C . t)))
(setq org-babel-python-command "python3")  
#+end_src
** Vertico
#+begin_src emacs-lisp
  (use-package vertico ; mode-line completion
    :ensure t
    :init
    (vertico-mode))
  (use-package savehist ; remeber most recent vertico commands
    :init
    (savehist-mode))
  (use-package marginalia ; provide extra information for vertico
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy maraginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src
** Counsel and Swiper
#+begin_src emacs-lisp
  ;;   (use-package ivy
  ;;   :ensure t
  ;;   :config
  ;;   (ivy-mode 1))

  ;; (use-package counsel
  ;;   :ensure t
  ;;   :config
  ;;   ;; Configure keybindings (optional)
  ;;   (global-set-key (kbd "C-c k") 'counsel-ag)
  ;;   (global-set-key (kbd "M-x") 'counsel-M-x)
  ;;   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  ;;   (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))

  ;; (use-package swiper
  ;;   :ensure t
  ;;   :config
  ;;   (global-set-key (kbd "C-s") 'swiper))
#+end_src
** Auto-Completion and Yasnippets
#+begin_src emacs-lisp
  (use-package yasnippet ; snippets
    :ensure t
    :config
    (yas-global-mode 1))
  (use-package company ; auto-completion
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src
** Latex and Move-text
#+begin_src emacs-lisp
  (use-package auctex ; latex
    :ensure t
    :defer t) 
  (require 'tex) 
  (push (list 'output-pdf "Zathura") TeX-view-program-selection) ; Zathura
  (use-package move-text
    :ensure t
    :config
    (global-set-key (kbd "M-p") 'move-text-up)
    (global-set-key (kbd "M-n") 'move-text-down))
#+end_src
** Whichkey, Projectile and Magit
#+begin_src emacs-lisp
  (use-package which-key ; which-key
    :ensure t
    :config
    (which-key-mode +1))
  (use-package projectile ; projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    (projectile-mode +1))
  (use-package magit   ; Version Control
    :ensure t)
#+end_src
** Org-Mode
#+begin_src emacs-lisp
  (defun efs/org-mode-setup () ; startup with indent
    (org-indent-mode) 
    (setq org-hide-emphasis-markers t)
    (setq org-src-tab-acts-natively t))
  (use-package org
    :ensure t
    :hook (org-mode . efs/org-mode-setup))
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))  
#+end_src
** Org-Roam
#+begin_src emacs-lisp
    (use-package org-roam
      :config
      (setq org-roam-directory "~/Documents/roam")
      (setq org-roam-graph-executable "/usr/bin/dot")
      (setq org-roam-graph-viewer nil)
      :bind
      ("C-c n c" . org-roam-capture)
      ("C-c n l" . org-roam-buffer-toggle)
      ("C-c n f" . org-roam-node-find)
      ("C-c n i" . org-roam-node-insert))
#+end_src
** V-term
#+begin_src emacs-lisp
    (defun my/open-vterm-in-right-window ()
    (interactive)
    (split-window-right)
    (other-window 1)
    (vterm)
    (set-window-dedicated-p (selected-window) t))
  (use-package vterm
    :ensure t 
    :bind
    ("C-c t" . my/open-vterm-in-right-window)) ; shell
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (global-set-key "\M-]" 'switch-to-next-buffer)
  (global-set-key "\M-[" 'switch-to-prev-buffer)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-c p") 'find-file-at-point)
  (global-set-key (kbd "C-x ;") 'comment-line)
  (global-set-key (kbd "<f6>") 'global-display-line-numbers-mode)
#+end_src
** Compiling Code
#+begin_src emacs-lisp
  (defun upward-find-file (filename &optional startdir)
    "Move up directories until we find a certain filename. If we
    manage to find it, return the containing directory. Else if we
    get to the toplevel directory and still can't find it, return
    nil. Start at startdir or . if startdir not given"
    (let ((dirname (expand-file-name
                    (if startdir startdir ".")))
          (found nil) ; found is set as a flag to leave loop if we find it
          (top nil))  ; top is set when we get
                                          ; to / so that we only check it once
                                          ; While we've neither been at the top last time nor have we found
                                          ; the file.
      (while (not (or found top))
                                          ; If we're at / set top flag.
        (if (string= (expand-file-name dirname) "/")
            (setq top t))
                                          ; Check for the file
        (if (file-exists-p (expand-file-name filename dirname))
            (setq found t)
                                          ; If not, move up a directory
          (setq dirname (expand-file-name ".." dirname))))
                                          ; return statement
      (if found dirname nil)))
  (defun compile-next-makefile (command)
    (interactive "sCompile command: ")
    (let* ((default-directory (or (upward-find-file "Makefile") "."))
           (compile-command (concat "cd " default-directory " && " command)))
      (compile compile-command)))

  (global-set-key "\C-c\C-m" 'compile) ; compile
  (global-set-key (kbd "C-c m m ") 'compile) ; compile (for fortran)
  (global-set-key (kbd "C-c m r") 'recompile) ; recompile
  (global-set-key (kbd "C-c m c") 'compile-next-makefile) ; makefile
#+end_src
** Undo-Tree
#+begin_src emacs-lisp
  ;; (use-package undo-tree
  ;;   :ensure t
  ;;   :config
  ;;   (global-undo-tree-mode)
  ;;   (setq undo-tree-visualizer-diff t)
  ;;   (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-tree")))
  ;;   (setq undo-tree-auto-save-history t))
#+end_src
** Evil-Mode
#+begin_src emacs-lisp
  ;; (use-package evil
  ;;   :ensure t
  ;;   :config
  ;;   (evil-mode 1)
  ;;   ;; Make C-u work like in normal Vim in Evil's normal state
  ;;   (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  ;;   ;; Fold Org headings in Evil's normal state
  ;;   (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)
  ;;   ;; Modify evil cursor behavior
  ;;   (setq evil-insert-state-cursor '((box . 5) "purple")
  ;; 		evil-normal-state-cursor '(box "yellow"))
  ;;   ;; Fine-grained undo
  ;;   (setq evil-want-fine-undo 'fine)
  ;;   ;; Disable evil insert bindings
  ;;   (setq evil-disable-insert-state-bindings t)
  ;;   ;; Enable undo-tree mode globally
  ;;   (global-undo-tree-mode)
  ;;   ;; Map undo and redo keys to Vim-like bindings
  ;;   (define-key evil-normal-state-map "u" 'undo-tree-undo)
  ;;   (define-key evil-normal-state-map "\C-r" 'undo-tree-redo))
#+end_src
** Treesitter
#+begin_src emacs-lisp
  ;; (use-package tree-sitter ; tree-sitter
  ;;   :ensure t
  ;;   :hook
  ;;   ((c-mode c++-mode) . tree-sitter-mode))
  ;; (use-package tree-sitter-langs
  ;;   :ensure t)
#+end_src
** Lsp-Mode
#+begin_src emacs-lisp
  ;; (use-package lsp-mode
  ;; :commands (lsp lsp-deferred)
  ;; :hook
  ;; ((c-mode . lsp-deferred)
  ;;  (c++-mode . lsp-deferred)
  ;;  (python-mode . lsp-deferred))
  ;; :init
  ;; (setq lsp-keymap-prefix "C-c l")
  ;; :config
  ;; (setq c-basic-offset 4) ; Set the indentation level for C language
  ;; (lsp-enable-which-key-integration))
#+end_src
* Emacs Language Specific setup
** Clojure
#+begin_src emacs-lisp
  (use-package clojure-mode)
  (use-package cider
    :ensure t
    :hook (cider-repl-mode . my-cider-repl-mode-hook)
    :config
    )
  (defun my-cider-repl-mode-hook ()
    (local-set-key (kbd "C-l") 'cider-repl-clear-buffer))
#+end_src

